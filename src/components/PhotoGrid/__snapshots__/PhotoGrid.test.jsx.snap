// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PhotoGrid Component renders correctly with photos 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PhotoGrid
    isFetching={false}
    photos={
        Array [
            Object {
              "id": "1",
              "urls": Object {
                "small": "http",
              },
              "user": Object {
                "links": Object {
                  "self": "https",
                },
                "name": "Tom",
              },
            },
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Header) />,
        Array [
          <div
            className="panel"
>
            <Connect(PhotoContainer)
                        id="1"
                        style={
                                    Object {
                                                "maxWidth": 400,
                                              }
                        }
                        url="http"
                        user={
                                    Object {
                                                "links": Object {
                                                  "self": "https",
                                                },
                                                "name": "Tom",
                                              }
                        }
            />
</div>,
        ],
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "host",
        "props": Object {
          "children": <Connect(PhotoContainer)
            id="1"
            style={
                        Object {
                                    "maxWidth": 400,
                                  }
            }
            url="http"
            user={
                        Object {
                                    "links": Object {
                                      "self": "https",
                                    },
                                    "name": "Tom",
                                  }
            }
/>,
          "className": "panel",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "1",
            "style": Object {
              "maxWidth": 400,
            },
            "url": "http",
            "user": Object {
              "links": Object {
                "self": "https",
              },
              "name": "Tom",
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Header) />,
          Array [
            <div
              className="panel"
>
              <Connect(PhotoContainer)
                            id="1"
                            style={
                                          Object {
                                                        "maxWidth": 400,
                                                      }
                            }
                            url="http"
                            user={
                                          Object {
                                                        "links": Object {
                                                          "self": "https",
                                                        },
                                                        "name": "Tom",
                                                      }
                            }
              />
</div>,
          ],
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "host",
          "props": Object {
            "children": <Connect(PhotoContainer)
              id="1"
              style={
                            Object {
                                          "maxWidth": 400,
                                        }
              }
              url="http"
              user={
                            Object {
                                          "links": Object {
                                            "self": "https",
                                          },
                                          "name": "Tom",
                                        }
              }
/>,
            "className": "panel",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "1",
              "style": Object {
                "maxWidth": 400,
              },
              "url": "http",
              "user": Object {
                "links": Object {
                  "self": "https",
                },
                "name": "Tom",
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`PhotoGrid Component renders correctly without photos 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PhotoGrid
    isFetching={false}
    photos={Array []}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Connect(Header) />,
        Array [],
      ],
      "className": "wrapper",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Connect(Header) />,
          Array [],
        ],
        "className": "wrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
